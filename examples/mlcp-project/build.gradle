/*
 * This buildscript shows how mlcp dependencies can be easily declared and then uses in a Gradle configuration named
 * "mlcp". This configuration is then used as the classpath for MlcpTask, which is a simple extension of Gradle's
 * JavaExec task that exposes a number of mlcp arguments as task attributes.
 */

buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath "com.marklogic:ml-gradle:2.4.0"
	}
}

apply plugin: "com.marklogic.ml-gradle"

repositories {
	jcenter()

	// Needed for mlcp dependencies
	maven { url "https://developer.marklogic.com/maven2/" }

	// Needed for hadoop dependencies for mlcp
	maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}


configurations {
	// This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
	// to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
	// shown below.
	mlcp
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {
	mlcp "com.marklogic:mlcp:8.0-5"
	//mlcp "com.marklogic:mlcp-Hadoop2:1.3-2"
	//mlcp "com.marklogic:marklogic-mapreduce2:2.1.3"

	/**
	 * If you need to import delimited text, be sure to include this dependency as well.
	 */
	mlcp "org.apache.commons:commons-csv:1.2"

	/**
	 * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
	 * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
	 * mlcp include a directory or some other resource that provides a log4j.properties file.
	 */
	mlcp files("lib")
}

/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importSampleData(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	input_file_path = "data/import"
	output_collections = "sample-import"
	output_permissions = "rest-reader,read,rest-writer,update"
	output_uri_replace = ".*import,'/import'"
}

/**
 * Example of using mlcp to import RDF data - in this case, World Bank's publicly available topical
 * taxonomy.
 */
task importRdf(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	input_file_path = "data/taxonomy.rdf"
	input_file_type = "rdf"
	output_uri_replace = ".*data,'/'"
	output_collections = "world-bank-topical-taxonomy"
	output_permissions = "rest-reader,read,rest-writer,update"
}

/**
 * Example of importing semicolon-delimited text, in reference to:
 * https://github.com/rjrudin/ml-gradle/issues/90
 */
task importSemicolonDelimitedText(type: com.marklogic.gradle.task.MlcpTask) {
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	input_file_path = "data/semicolon-delimited-file.txt"
	input_file_type = "delimited_text"
	output_uri_replace = ".*data,'/'"
	output_permissions = "rest-reader,read,rest-writer,update"
	delimiter = ";"
}

/**
 * Example of using MlcpTask to export data with mlcp. This example also shows how the connection values can be
 * overridden.
 */
task exportSampleData(type: com.marklogic.gradle.task.MlcpTask) {
	description = "Example of using mlcp and MlcpTask to export documents; note the args array is used for any args MlcpTask doesn't yet have as task attributes"
	classpath = configurations.mlcp
	command = "EXPORT"
	host = "localhost" // defaults to mlHost
	port = 8000 // defaults to 8000
	username = "admin" // defaults to mlRestAdminUsername, which defaults to mlUsername
	password = "admin" // defaults to mlRestAdminPassword, which defaults to mlPassword
	database = mlAppConfig.contentDatabaseName
	output_file_path = "data/export"
	collection_filter = "sample-import"
}
