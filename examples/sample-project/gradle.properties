# The hostname of a node in the MarkLogic cluster to which you wish to deploy an application.
mlHost=localhost

# The name of this application; this will be used for creating a number of resources, such as databases and appservers
mlAppName=sample-project

# ml-gradle is geared towards applications that use the REST API, so a port number is needed for a new REST API server
mlRestPort=8100

# If specified, then a test database with app servers for that database will be created, which can then be used for
# automated tests. 
mlTestRestPort=8101

# You can define just mlUsername and mlPassword, and that user will be used for all deployment operations, but that's
# generally not a good practice, as this user will need the admin role in order to create security resources. Generally,
# you want to use an admin user just for mlAdminUsername, as that username will only be used for creating security 
# resources such as users and roles. You can then use app-specific users for mlRestAdminUsername, mlManageUsername, etc.
#
# Otherwise, this is typically an application user. In sample-project, this user is used for running JUnit tests.
mlUsername=sample-project-rest-admin
mlPassword=password


# This username/password combo is for the "REST admin" user, which is used for loading modules via the REST API as well
# as via XCC. The user must have the rest-admin role. And in order to load modules via XCC, the user must have a role 
# that grants xdbc:insert-in and any-uri (or some other set of URI privileges).
# 
# If not specified, then mlUsername/mlPassword must be used.
mlRestAdminUsername=sample-project-rest-admin
mlRestAdminPassword=password


# If specified, the manage username/password combo is used with the ML Management REST API for managing application 
# resources; this user must have the manage-admin and rest-admin roles. 
# 
# If these are not set, then mlUsername/mlPassword is used for managing application resources.
mlManageUsername=sample-project-manager
mlManagePassword=password


# If specified, the admin username/password combo is used with the ML Management REST API for creating users and roles. This
# user must have the manage-admin or admin role. A good practice is to use your admin account here to create app-specific
# users and roles, which can then be used as mlManageUsername/mlManagePassword and mlUsername/mlPassword. This practice
# is used in this sample project; see src/main/ml-config/security to see how the app-specific users and roles are 
# created. 
# 
# These properties are also used for connecting to the admin application on port 8001 - e.g. for initializing ML and for
# waiting for ML to restart.
#
# If these properties are not set, then mlUsername/mlPassword will be used. 
mlAdminUsername=admin
mlAdminPassword=admin


# Configuring the number of forests for the content database (and optional test database) is a common requirement, and
# thus there's a specific property for doing so. This is optional - if you leave it out, the content database defaults 
# to 3 forests per host.
mlContentForestsPerHost=4


# By default, modules under /ext and /root are loaded with the default REST API asset permissions of 
# rest-admin,read,rest-admin,update,rest-extension-user,execute. You can easily override those by setting the 
# mlModulePermissions property, as shown below. This example simply adds rest-reader/read to the set of permissions,
# but you can customize these to be whatever you would like.
mlModulePermissions=rest-admin,read,rest-admin,update,rest-extension-user,execute,rest-reader,read


# ml-gradle uses ml-javaclient-util (https://github.com/rjrudin/ml-javaclient-util) under the hood for loading modules.
# This library has to determine what kind of document format to use for loading each module. It knows to load certain
# files as binaries based on their extensions, but you may find you have additional files that need to be loaded as
# binaries. To do, just set the below property with a comma-separated list of extensions. Of course *.gradle and
# *.properties files aren't typically binary files, this is just for sake of example.
mlAdditionalBinaryExtensions=.gradle,.properties


# The configuration directory defaults to src/main/ml-config. You can override this by setting mlConfigDir, as shown
# below. This will result in a new instance of ConfigDir with the given path being set on the instance of AppConfig
# that's created by ml-gradle.
# mlConfigDir=some/other/path
